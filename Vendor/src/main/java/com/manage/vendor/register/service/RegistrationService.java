package com.manage.vendor.register.service;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.manage.vendor.register.dao.UserRepository;
import com.manage.vendor.register.entity.User;
import com.manage.vendor.register.vo.UserVO;


@RestController
public class RegistrationService {
	
	private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
	
	@RequestMapping(path="/register", method=RequestMethod.POST)
	public Long registerUser(@RequestBody UserVO userVO){
		User user = new User(userVO);
		userRepository.save(user);
		return user.getId();
		
	}
	
	@RequestMapping(path="/getUser/{id}", method=RequestMethod.GET)
	public UserVO getUser(@PathVariable(value = "id") Long id){
		User user = userRepository.findOne(id);
		return new UserVO(user);
		
	}
	
	@RequestMapping(path="/getAllUser", method=RequestMethod.GET)
	public Iterable<User> getAllUser(){
		return userRepository.findAll();
		
	}
	
	@RequestMapping(path="/deleteUser/{id}", method=RequestMethod.GET)
	public String deleteUserById(@PathVariable(value = "id") Long id){
		userRepository.delete(id);
		return "Deleted";
		
	}
	
	@RequestMapping("/greeting")
    public UserVO greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new UserVO(counter.incrementAndGet(),
                            String.format(template, name));
    }

}
